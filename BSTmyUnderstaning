class BST:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

    def insert(self, data):
        if self.key is None:
            self.key = data
            return
        if self.key == data:
            return
        if self.key > data:
            if self.left:
                self.left.insert(data)
            else:
                self.left = BST(data)
        elif self.key < data:
            if self.right:
                self.right.insert(data)
            else:
                self.right = BST(data)

    def search(self, data):
        if self.key is None:
            print("the tree is empty")
            return
        if self.key == data:
            print("node is found")
            return
        if self.key > data:
            if self.left:
                self.left.search(data)
            else:
                print("no node exist")
        elif self.key < data:
            if self.right:
                self.right.search(data)
            else:
                print("no node exists")
        else:
            print("given values does not exist")
            return
    def preorder(self):     #root->left->right
        print(self.key)
        if self.left:
            self.left.preorder()
        if self.right:
            self.right.preorder()

    def inorder(self):
        if self.left:
            self.left.inorder()
        print(self.key)
        if self.right:
            self.right.inorder()

    def postorder(self):
        if self.left:
            self.left.postorder()
        if self.right:
            self.right.postorder()
        print(self.key)

    def min(self):
        if self.left:
            self.left.min()
        else:
            print("smallest node is ", self.key)
    def max(self):
        if self.right:
            self.right.max()
        else:
            print("largest node is ", self.key)



    def delete(self,data):
        if self.key is None:
            print("Binary tree does not exists")
        if self.key > data:
            if self.left:
                self.left = self.left.delete(data)
            else:
                print("given node is not present")
        elif self.key < data:
            if self.right:
                self.right = self.right.delete(data)
            else:
                print("given node is not present")
        else:
            if self.left is None:
                temp = self.right
                self = None
                return temp
            elif self.right is None:
                temp = self.left
                self = None
                return temp
            else:
                node = self.right
                while node.left:
                    node = node.left
                self.key = node.key
                self.right = self.right.delete(node.key)
            return self

root = BST(None)
root.insert(30)
list = [20,18,22,68,12,83,55,108]
for i in list:
    root.insert(i)
root.min()
root.max()
print("Preorder")
root.preorder()
print("inorder")
root.inorder()
print("postorder")
root.postorder()
root.search(41)
root.search(83)
root.delete(68)
root.delete(22)
print("after deletion")
print("inorder")
root.inorder()





